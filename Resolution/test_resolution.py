from résolution import *
from pytest import *


def test_colonne():
    grille1 = np.array([[0,0,0,0,1,0,0,0,0],
                    [0,0,0,0,0,0,0,0,0],
                    [0,0,0,0,2,0,0,0,0],
                    [0,0,0,0,0,0,0,0,0],
                    [0,0,0,0,9,0,0,0,0],
                    [0,0,0,0,0,0,0,0,0],
                    [0,0,0,0,4,0,0,0,0],
                    [0,0,0,0,9,0,0,0,0],
                    [0,0,0,0,0,0,0,0,0]])
    grille2 = np.array([[0,0,0,0,9,0,0,0,0],
                    [0,0,0,0,0,0,0,0,0],
                    [0,0,0,0,5,0,0,0,0],
                    [0,0,0,0,0,0,0,0,0],
                    [0,0,0,0,2,0,0,0,0],
                    [0,0,0,0,3,0,0,0,0],
                    [0,0,0,0,0,0,0,0,0],
                    [0,0,0,0,4,0,0,0,0],
                    [0,0,0,0,0,0,0,0,0]])
    assert colonne(grille1,4,1) == False
    assert colonne(grille2,4,1) == True

def test_ligne():
    grille1 = np.array([[0,0,0,0,1,0,0,0,0],
                    [0,0,0,0,0,0,0,0,0],
                    [6,0,0,0,2,3,0,1,0],
                    [0,0,0,0,0,0,0,0,0],
                    [0,0,0,0,1,0,0,0,0],
                    [0,0,0,0,0,0,0,0,0],
                    [0,0,0,0,4,0,0,0,0],
                    [0,0,0,0,9,0,0,0,0],
                    [0,0,0,0,0,0,0,0,0]])
    grille2 = np.array([[0,0,0,0,1,0,0,0,0],
                    [0,0,0,0,0,0,0,0,0],
                    [0,1,3,0,5,0,8,0,0],
                    [0,0,0,0,0,0,0,0,0],
                    [0,0,0,0,2,0,0,0,0],
                    [0,0,0,0,3,0,0,0,0],
                    [0,0,0,0,0,0,0,0,0],
                    [0,0,0,0,4,0,0,0,0],
                    [0,0,0,0,0,0,0,0,0]])
    assert ligne(grille1,2,6) == False
    assert ligne(grille2,2,6) == True

def test_carré():
    grille1 = np.array([[5,0,0,0,1,0,0,0,0],
                    [6,0,0,0,0,0,0,0,0],
                    [0,0,8,0,2,0,0,0,0],
                    [0,0,0,0,0,0,0,0,0],
                    [0,0,0,0,1,0,0,0,0],
                    [0,0,0,0,0,0,0,0,0],
                    [0,0,0,0,4,0,0,0,0],
                    [0,0,0,0,9,0,0,0,0],
                    [0,0,0,0,0,0,0,0,0]])
    grille2 = np.array([[0,0,0,5,1,0,0,0,0],
                    [1,0,7,0,0,0,0,0,0],
                    [0,3,0,0,0,0,0,0,0],
                    [0,5,0,0,0,0,0,0,0],
                    [0,0,0,0,2,0,0,0,0],
                    [0,0,0,0,3,0,0,0,0],
                    [0,0,0,0,0,0,0,0,0],
                    [0,0,0,0,4,0,0,0,0],
                    [0,0,0,0,0,0,0,0,0]])
    assert carré(grille1,1,1,5) == False
    assert carré(grille2,1,1,5) == True

def test_suivant():
    assert suivant(0,0) == (0,1)
    assert suivant(4,5) == (4,6)
    assert suivant(4,8) == (5,0)
    assert suivant(8,8) == (8,8)

def test_resolve():
    assert (resolve(np.array([[0., 2., 4., 0., 1., 0., 0., 5., 8.],
       [0., 0., 0., 0., 0., 0., 4., 0., 6.],
       [0., 6., 0., 0., 5., 8., 1., 3., 2.],
       [2., 0., 5., 0., 6., 7., 8., 4., 3.],
       [0., 0., 6., 3., 9., 2., 0., 1., 5.],
       [7., 0., 0., 5., 0., 4., 0., 2., 0.],
       [0., 5., 9., 6., 0., 0., 0., 8., 0.],
       [6., 7., 0., 0., 4., 0., 3., 0., 1.],
       [0., 0., 3., 0., 0., 1., 5., 0., 0.]])) == np.array([[3., 2., 4., 7., 1., 6., 9., 5., 8.],
       [5., 1., 8., 2., 3., 9., 4., 7., 6.],
       [9., 6., 7., 4., 5., 8., 1., 3., 2.],
       [2., 9., 5., 1., 6., 7., 8., 4., 3.],
       [4., 8., 6., 3., 9., 2., 7., 1., 5.],
       [7., 3., 1., 5., 8., 4., 6., 2., 9.],
       [1., 5., 9., 6., 7., 3., 2., 8., 4.],
       [6., 7., 2., 8., 4., 5., 3., 9., 1.],
       [8., 4., 3., 9., 2., 1., 5., 6., 7.]])).all()

def test_resolve_random():
    assert (resolve(np.array([[0., 2., 4., 0., 1., 0., 0., 5., 8.],
       [0., 0., 0., 0., 0., 0., 4., 0., 6.],
       [0., 6., 0., 0., 5., 8., 1., 3., 2.],
       [2., 0., 5., 0., 6., 7., 8., 4., 3.],
       [0., 0., 6., 3., 9., 2., 0., 1., 5.],
       [7., 0., 0., 5., 0., 4., 0., 2., 0.],
       [0., 5., 9., 6., 0., 0., 0., 8., 0.],
       [6., 7., 0., 0., 4., 0., 3., 0., 1.],
       [0., 0., 3., 0., 0., 1., 5., 0., 0.]])) == np.array([[3., 2., 4., 7., 1., 6., 9., 5., 8.],
       [5., 1., 8., 2., 3., 9., 4., 7., 6.],
       [9., 6., 7., 4., 5., 8., 1., 3., 2.],
       [2., 9., 5., 1., 6., 7., 8., 4., 3.],
       [4., 8., 6., 3., 9., 2., 7., 1., 5.],
       [7., 3., 1., 5., 8., 4., 6., 2., 9.],
       [1., 5., 9., 6., 7., 3., 2., 8., 4.],
       [6., 7., 2., 8., 4., 5., 3., 9., 1.],
       [8., 4., 3., 9., 2., 1., 5., 6., 7.]])).all()    


def test_transform_grid():
    assert (np.array(transform_grid([['' ,'' ,'' ,'' ,[8],'' ,'' ,'' ,'' ],
         [[8],'' ,'' ,'' ,[9],'' ,'' ,'' ,[3]],
         ['' ,'' ,[5],[2],[7],[3],[6],'' ,'' ],
         ['' ,[4],[1],'' ,'' ,'' ,[3],[7],'' ],
         [[7],'' ,'' ,'' ,'' ,'' ,'' ,'' ,[6]],
         ['' ,[6],[2],'' ,'' ,'' ,[8],[5],'' ],
         ['' ,'' ,[9],[8],[1],[7],[2],'' ,'' ],
         [[4],'' ,'' ,'' ,[5],'' ,'' ,'' ,[7]],
         ['' ,'' ,'' ,'' ,[2],'' ,'' ,'' ,'' ]])) == np.array([[0 ,0 ,0 ,0 ,[8],0 ,0 ,0 ,0 ],
         [[8],0 ,0 ,0 ,[9],0 ,0 ,0 ,[3]],
         [0 ,0 ,[5],[2],[7],[3],[6],0 ,0 ],
         [0 ,[4],[1],0 ,0 ,0 ,[3],[7],0 ],
         [[7],0 ,0 ,0 ,0 ,0 ,0 ,0 ,[6]],
         [0 ,[6],[2],0 ,0 ,0 ,[8],[5],0 ],
         [0 ,0 ,[9],[8],[1],[7],[2],0 ,0 ],
         [[4],0 ,0 ,0 ,[5],0 ,0 ,0 ,[7]],
         [0 ,0 ,0 ,0 ,[2],0 ,0 ,0 ,0 ]])).all()



test_ligne()
test_colonne()
test_carré()
test_suivant()
test_resolve()
test_resolve_random()
test_transform_grid()
